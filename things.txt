This somewhat works... 

OK, I guess this is the end of this port. I've somehow managed to port the python note taking app to c++ without knowing anything about c++. Huge thanks!



So let me conclude what my program currently has. 

1. Basic Notebook
1.1 Pressure Sensitive Ink
1.2 Anti-Aliasing
1.3 Adjust thickness based on zoom level

2. Tools
2.1 Pen, Marker, Eraser
2.2 Adjustable thickness
2.3 Color presets and customizable colors

3. Pages
3.1 One picture per page 
3.2 Save notes and save annotated
3.3 Adjustable canvas size to fit the background
3.4 Adjustable zoom level
3.5 Correct range of x and y dimension sliders
3.6 Delete Page

4. PDF features
4.1 Loads PDF
4.2 Map every page to the PDF
4.3 PDF Cache of a reasonable size
4.4 Stores PDF directory persistently

5. MISC
5.1 Sample rate benchmarking

For future, what are you recommendations if I need to finish it in 4 days (maybe slightly longer), (with a few hours per day, because I take 7 courses per semester)?

The things I can come up with are... 

1. Tabs, like the ones on a browser. It's like opening a few canvases like opening several instances of the program, for quick switching between documents
2. A rope tool. This lets the user select an arbitrary shape and range of stuff on the canvas and move/scale it all around the canvas.
3. A pencil. Pressure of the pencil not only adjusts the thickness, it also adjusts the texture/opacity. I may even consider using the tilt sensor of wacom emr 2.0 on 2017+ devices. 
4. Text boxes (to annotate a pdf). Just in case the user wants to type in text instead of writing them by hand. My program probably needs another layer for text. 
5. An icon and a nice name for my app. 

The things I don't think make much sense are :
1. Cloud syncing. If I position the notebook folder inside the onedrive directory of windows file manager, onedrive automatically does the job. 
I don't need to modify my app at all to support cloud syncing. 

Which one do you think is the most practical while doesn't need any major reconstruction of my program? 

New Features:

1. 同时读取两个PDF页面（如果页面实际上比较扁的话） 然后这样就可以实现平滑滚动，当滚过第一个页面的时候第二个页面实际上迅速就可以接上。然后在第二页的时候就会开始读第三页，等等。

2. 滚轮滚动进入，一个页面到底之前（注意不是之后），直接读取下一个。

3. 当然 joycon support

4. 最近文档的面板，类似squid，以及新建不同尺寸的画布和不同的网格背景。

5. 套索工具

6. 封装为一个新的扩展名。这样就不会有一大坨零散的文件

7. 明暗图标的切换，暗黑模式还是明亮模式？这样就可以切换两套不同的图标。

8. 切换和隐藏UI，能否把工具栏放到左边而不是右边？以及低DPI模式

9. 每个画布可能有多个图层？这样是否也有必要？

10. 直线工具？


OK, going back to supporting more languages. What I want is to make the program translate things automatically (but obviously not on the go, they should be fixed in the compiled version), with the ability to override
the automatic translations if I don't think it's translated well enough. Is it possible? How can I do it? My app does not have much text to begin with. It's mostly the control panel and 
button tool tips. Can you help me work on this feature? 


OK, I'll continue making minor improvements to this app. Now I'm going to make the toolbar hide after clicking a button. This is the logic of most of my ui components. 
Now the problem becomes... How can the user reenable the toolbar? Should I create something else outside the toolbar to toggle the toolbar? And I'm pretty sure that the tab layout on the side should be hidden
before hiding the toolbar. 

What do I need to do?


